// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes here
//:};

/* User code components 2: parser code components.
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;

    /* Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";

        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
	     */

            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
	    }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}

    // Override the report_fatal_error method to use the report_error method.
    public void report_fatal_error (String message, Object info) throws Exception
	{
        report_error (message, info);
        throw new Exception (lastError);
	}

   // version string for printing version in Main
   public static final String version =
     "Winter 2017" ;

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2016/2017

// Terminals returned by the scanner with no value attached.
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal 	BOOLEAN,INTEGER,FUNCTION,PROCEDURE	;
terminal	DO,	ELSE,	EXIT,   IF	;
terminal	READ, 	REPEAT,	RETURN,	NEWLINE,THEN,	UNTIL	;
terminal	VAR,	WHEN,	WHILE,	WITHX,	WRITE 	;

// Special-character terminals, no value attached
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT, QUESTION, COLON	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal program;
nonterminal statement;
nonterminal declaration;
nonterminal declarations;
nonterminal variable_names;
nonterminal bound;
nonterminal string;
nonterminal scope;
nonterminal output;
nonterminal outputs;
nonterminal input;
nonterminal inputs;
nonterminal type;
nonterminal argument;
nonterminal arguments;
nonterminal parameter;
nonterminal parameters;
nonterminal variable;
nonterminal expression;
nonterminal arithmetic_expression;
nonterminal times_or_divide_expression;
nonterminal times_or_divide_operand;
nonterminal primitive;
nonterminal statements;
nonterminal or_expression;
nonterminal and_expression;
nonterminal negation_expression;
nonterminal compare_expression;

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented out.
//
//precedence right PLUS, MINUS;
//precedence right TIMES, DIVIDE;       // Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */


/*  YOUR CLEVERLY CRAFTED cup GRAMMAR FOR THE CSC488S SOURCE LANGUAGE
 *  GOES HERE
 */

program     ::= scope;

scope ::= L_CURLEY declarations statements R_CURLEY
        | L_CURLEY statements R_CURLEY
        | L_CURLEY R_CURLEY;

declarations ::= declaration
               | declaration declarations;

declaration ::= VAR variable_names COLON type
              | FUNCTION string COLON type scope
              | FUNCTION string L_PAREN parameters R_PAREN COLON type scope
              | PROCEDURE string scope
              | PROCEDURE string L_PAREN parameters R_PAREN scope;

statements  ::= statement
              | statement statements;

statement   ::= variable COLON EQUAL expression
              //| IF expression THEN statements
              //| IF expression THEN statements ELSE statements
              //| WHILE expression DO statements
			  | REPEAT statements UNTIL expression
			  | EXIT
			  | EXIT INTCONST
			  | EXIT WHEN expression
			  | EXIT INTCONST WHEN expression
			  | RETURN WITHX expression
			  | RETURN
			  | READ inputs
			  | WRITE outputs
			  | string
			  | string L_PAREN arguments R_PAREN
			  | scope;

variable_names ::= string
                | string L_SQUARE INTCONST R_SQUARE
                | string L_SQUARE bound DOT DOT bound R_SQUARE
                | string COMMA variable_names;

arguments ::= argument
            | argument COMMA arguments;

argument ::= expression;

expression ::= or_expression
             | L_PAREN expression QUESTION expression COLON expression R_PAREN
             | variable
             | string L_PAREN arguments R_PAREN;

or_expression ::= and_expression
                | or_expression OR and_expression;

and_expression ::= negation_expression
                 | and_expression AND negation_expression;

negation_expression ::= compare_expression
                   |   NOT negation_expression;

compare_expression ::= arithmetic_expression
                  |   arithmetic_expression EQUAL arithmetic_expression
                  |   arithmetic_expression NOT EQUAL arithmetic_expression
                  |   arithmetic_expression LESS arithmetic_expression
                  |   arithmetic_expression LESS THEN arithmetic_expression
                  |   arithmetic_expression GREATER arithmetic_expression
                  |   arithmetic_expression GREATER EQUAL arithmetic_expression;

arithmetic_expression ::= times_or_divide_expression
                       | arithmetic_expression PLUS times_or_divide_expression
                       | arithmetic_expression PLUS L_PAREN times_or_divide_expression R_PAREN
                       | L_PAREN arithmetic_expression R_PAREN PLUS times_or_divide_expression
                       | arithmetic_expression MINUS times_or_divide_expression
                       | arithmetic_expression MINUS L_PAREN times_or_divide_expression R_PAREN
                       | L_PAREN arithmetic_expression R_PAREN times_or_divide_expression;

times_or_divide_expression ::= times_or_divide_operand
                          | times_or_divide_expression TIMES times_or_divide_operand
                          | times_or_divide_expression TIMES L_PAREN times_or_divide_operand R_PAREN
                          | times_or_divide_expression DIVIDE times_or_divide_operand
                          | times_or_divide_expression DIVIDE L_PAREN times_or_divide_operand R_PAREN;

times_or_divide_operand ::= primitive
                            | MINUS primitive;

primitive ::= INTCONST | TRUE | FALSE;

bound ::= INTCONST | MINUS INTCONST;

outputs ::= output | output COMMA outputs;

output ::= expression
         | TEXTCONST
         | NEWLINE;

inputs ::= input COMMA inputs;

input ::= variable;

type ::= INTEGER | BOOLEAN;

parameters ::= parameter
             | parameter COMMA parameters;

parameter ::= string COLON type;

variable ::= string
           | string L_SQUARE expression R_SQUARE;

string ::= IDENT;
