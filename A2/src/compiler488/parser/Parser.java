
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 31 17:19:47 EST 2017
//----------------------------------------------------

package compiler488.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 31 17:19:47 EST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\011" +
    "\006\000\002\011\005\000\002\011\004\000\002\005\003" +
    "\000\002\005\004\000\002\004\006\000\002\004\007\000" +
    "\002\004\012\000\002\004\005\000\002\004\010\000\002" +
    "\032\003\000\002\032\004\000\002\003\006\000\002\003" +
    "\006\000\002\003\003\000\002\003\004\000\002\003\005" +
    "\000\002\003\006\000\002\003\005\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\006\000\002\003\003\000\002\006\003\000\002\006" +
    "\006\000\002\006\011\000\002\006\005\000\002\020\003" +
    "\000\002\020\005\000\002\017\003\000\002\024\003\000" +
    "\002\024\011\000\002\024\006\000\002\033\003\000\002" +
    "\033\005\000\002\034\003\000\002\034\005\000\002\035" +
    "\003\000\002\035\004\000\002\036\003\000\002\036\005" +
    "\000\002\036\006\000\002\036\005\000\002\036\006\000" +
    "\002\036\005\000\002\036\006\000\002\025\003\000\002" +
    "\025\005\000\002\025\005\000\002\026\003\000\002\026" +
    "\005\000\002\026\005\000\002\027\003\000\002\027\004" +
    "\000\002\030\003\000\002\030\005\000\002\030\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\007\003\000\002\007\004\000\002\013\003\000\002\013" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\015\005\000\002\014\003\000\002\016\003\000" +
    "\002\016\003\000\002\022\003\000\002\022\005\000\002" +
    "\021\005\000\002\023\003\000\002\023\006\000\002\010" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\004\040\006\001\002\000\004\002\242\001" +
    "\002\000\004\002\000\001\002\000\030\013\020\014\012" +
    "\017\011\021\013\022\026\023\017\027\027\033\021\040" +
    "\006\041\023\055\016\001\002\000\032\017\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\026\uffe9\033\uffe9\034\237\036\104\040" +
    "\uffe9\041\uffe9\050\uffb3\055\uffe9\001\002\000\026\013\020" +
    "\014\012\017\ufffc\021\ufffc\022\ufffc\023\ufffc\027\027\033" +
    "\ufffc\040\ufffc\055\ufffc\001\002\000\030\017\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\026\ufff1\030\232\033\ufff1\040\ufff1\041" +
    "\ufff1\055\ufff1\056\231\001\002\000\004\055\016\001\002" +
    "\000\004\055\016\001\002\000\024\017\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\026\uffe7\033\uffe7\040\uffe7\041\uffe7\055\uffe7" +
    "\001\002\000\024\017\011\021\013\022\026\023\017\026" +
    "\ufff5\033\021\040\006\041\ufff5\055\016\001\002\000\066" +
    "\004\uffb1\005\uffb1\006\uffb1\017\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\026\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\001\002\000\026\017\uffec\021\uffec\022\uffec\023\uffec\026" +
    "\uffec\032\213\033\uffec\040\uffec\041\uffec\055\uffec\001\002" +
    "\000\004\055\016\001\002\000\024\006\060\007\063\010" +
    "\071\024\170\034\065\052\072\055\016\056\061\057\164" +
    "\001\002\000\020\017\011\021\013\022\026\023\017\033" +
    "\021\040\006\055\016\001\002\000\034\002\ufffd\013\ufffd" +
    "\014\ufffd\017\ufffd\021\ufffd\022\ufffd\023\ufffd\026\ufffd\027" +
    "\ufffd\033\ufffd\040\ufffd\041\ufffd\055\ufffd\001\002\000\004" +
    "\050\157\001\002\000\004\041\156\001\002\000\020\017" +
    "\011\021\013\022\026\023\017\033\021\040\006\055\016" +
    "\001\002\000\004\055\016\001\002\000\010\036\037\045" +
    "\036\050\uffe6\001\002\000\004\050\032\001\002\000\006" +
    "\011\035\012\033\001\002\000\032\013\uffb8\014\uffb8\017" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\027\uffb8\033\uffb8\035\uffb8" +
    "\040\uffb8\045\uffb8\055\uffb8\001\002\000\026\013\ufffa\014" +
    "\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\027\ufffa\033\ufffa" +
    "\040\ufffa\055\ufffa\001\002\000\032\013\uffb7\014\uffb7\017" +
    "\uffb7\021\uffb7\022\uffb7\023\uffb7\027\uffb7\033\uffb7\035\uffb7" +
    "\040\uffb7\045\uffb7\055\uffb7\001\002\000\004\055\016\001" +
    "\002\000\006\052\042\056\040\001\002\000\006\037\051" +
    "\046\uffc1\001\002\000\004\046\044\001\002\000\004\056" +
    "\043\001\002\000\006\037\uffc0\046\uffc0\001\002\000\004" +
    "\046\045\001\002\000\006\052\042\056\046\001\002\000" +
    "\004\037\uffc1\001\002\000\004\037\050\001\002\000\004" +
    "\050\uffe4\001\002\000\004\050\uffe5\001\002\000\004\050" +
    "\uffe3\001\002\000\004\026\054\001\002\000\020\006\060" +
    "\007\063\010\071\034\065\052\072\055\016\056\061\001" +
    "\002\000\066\004\uffb3\005\uffb3\006\uffb3\017\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\026\uffb3\033\uffb3\034\147\035\uffb3\036" +
    "\104\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3" +
    "\045\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\001\002\000\062\004\uffcf\005\uffcf\006\uffcf" +
    "\017\uffcf\021\uffcf\022\uffcf\023\uffcf\026\uffcf\033\uffcf\035" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\122\054" +
    "\121\055\uffcf\001\002\000\040\005\145\017\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\026\uffdf\033\uffdf\035\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\045\uffdf\047\uffdf\050\uffdf\055\uffdf\001\002" +
    "\000\020\006\060\007\063\010\071\034\101\052\072\055" +
    "\016\056\061\001\002\000\062\004\uffc4\005\uffc4\006\uffc4" +
    "\017\uffc4\021\uffc4\022\uffc4\023\uffc4\026\uffc4\033\uffc4\035" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\001\002\000\062\004\uffc9\005\uffc9\006\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\023\uffc9\026\uffc9\033\uffc9\035" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\001\002\000\062\004\uffc3\005\uffc3\006\uffc3" +
    "\017\uffc3\021\uffc3\022\uffc3\023\uffc3\026\uffc3\033\uffc3\035" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\001\002\000\042\004\142\005\uffdc\017\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\026\uffdc\033\uffdc\035\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\045\uffdc\047\uffdc\050\uffdc\055\uffdc" +
    "\001\002\000\020\006\060\007\063\010\071\034\065\052" +
    "\072\055\016\056\061\001\002\000\062\004\uffc7\005\uffc7" +
    "\006\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\026\uffc7\033" +
    "\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\001\002\000\024\017\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\026\ufff2\033\ufff2\040\ufff2\041\ufff2\055" +
    "\ufff2\001\002\000\056\004\uffd6\005\uffd6\006\107\017\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\026\uffd6\033\uffd6\035\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\112\043\110\044\114\045\uffd6" +
    "\047\uffd6\050\uffd6\051\111\052\113\055\uffd6\001\002\000" +
    "\062\004\uffc2\005\uffc2\006\uffc2\017\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\026\uffc2\033\uffc2\035\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050\uffc2" +
    "\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\001\002\000" +
    "\014\007\063\010\071\034\101\055\016\056\061\001\002" +
    "\000\062\004\uffc5\005\uffc5\006\uffc5\017\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\026\uffc5\033\uffc5\035\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\001\002" +
    "\000\042\004\uffd8\005\uffd8\017\uffd8\021\uffd8\022\uffd8\023" +
    "\uffd8\026\uffd8\033\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8" +
    "\045\uffd8\047\uffd8\050\uffd8\055\uffd8\001\002\000\042\004" +
    "\uffda\005\uffda\017\uffda\021\uffda\022\uffda\023\uffda\026\uffda" +
    "\033\uffda\035\uffda\037\uffda\040\uffda\041\uffda\045\uffda\047" +
    "\uffda\050\uffda\055\uffda\001\002\000\062\004\uffcc\005\uffcc" +
    "\006\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\026\uffcc\033" +
    "\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\054\uffcc\055\uffcc\001\002\000\064\004\uffb3\005\uffb3" +
    "\006\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\026\uffb3\033" +
    "\uffb3\035\uffb3\036\104\037\uffb3\040\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\001\002\000\062\004\uffc8" +
    "\005\uffc8\006\uffc8\017\uffc8\021\uffc8\022\uffc8\023\uffc8\026" +
    "\uffc8\033\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\051\uffc8\052" +
    "\uffc8\053\uffc8\054\uffc8\055\uffc8\001\002\000\020\006\060" +
    "\007\063\010\071\034\065\052\072\055\016\056\061\001" +
    "\002\000\004\035\103\001\002\000\062\004\uffc6\005\uffc6" +
    "\006\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\026\uffc6\033" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\001\002\000\020\006\060\007\063" +
    "\010\071\034\065\052\072\055\016\056\061\001\002\000" +
    "\004\037\106\001\002\000\062\004\uffb2\005\uffb2\006\uffb2" +
    "\017\uffb2\021\uffb2\022\uffb2\023\uffb2\026\uffb2\033\uffb2\035" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\001\002\000\004\042\132\001\002\000\020" +
    "\007\063\010\071\034\101\042\127\052\072\055\016\056" +
    "\061\001\002\000\016\007\063\010\071\034\101\052\072" +
    "\055\016\056\061\001\002\000\016\007\063\010\071\034" +
    "\101\052\072\055\016\056\061\001\002\000\016\007\063" +
    "\010\071\034\101\052\072\055\016\056\061\001\002\000" +
    "\020\007\063\010\071\034\101\042\115\052\072\055\016" +
    "\056\061\001\002\000\016\007\063\010\071\034\101\052" +
    "\072\055\016\056\061\001\002\000\046\004\uffd3\005\uffd3" +
    "\017\uffd3\021\uffd3\022\uffd3\023\uffd3\026\uffd3\033\uffd3\035" +
    "\uffd3\037\uffd3\040\uffd3\041\uffd3\045\uffd3\047\uffd3\050\uffd3" +
    "\051\111\052\113\055\uffd3\001\002\000\046\004\uffd2\005" +
    "\uffd2\017\uffd2\021\uffd2\022\uffd2\023\uffd2\026\uffd2\033\uffd2" +
    "\035\uffd2\037\uffd2\040\uffd2\041\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\051\111\052\113\055\uffd2\001\002\000\062\004\uffcd" +
    "\005\uffcd\006\uffcd\017\uffcd\021\uffcd\022\uffcd\023\uffcd\026" +
    "\uffcd\033\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\122\054\121\055\uffcd\001\002\000\016\007\063" +
    "\010\071\034\101\052\072\055\016\056\061\001\002\000" +
    "\016\007\063\010\071\034\101\052\072\055\016\056\061" +
    "\001\002\000\062\004\uffcb\005\uffcb\006\uffcb\017\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\026\uffcb\033\uffcb\035\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\001\002\000\062\004\uffca\005\uffca\006\uffca\017\uffca\021" +
    "\uffca\022\uffca\023\uffca\026\uffca\033\uffca\035\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\047" +
    "\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca" +
    "\001\002\000\046\004\uffd5\005\uffd5\017\uffd5\021\uffd5\022" +
    "\uffd5\023\uffd5\026\uffd5\033\uffd5\035\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\045\uffd5\047\uffd5\050\uffd5\051\111\052\113\055" +
    "\uffd5\001\002\000\062\004\uffce\005\uffce\006\uffce\017\uffce" +
    "\021\uffce\022\uffce\023\uffce\026\uffce\033\uffce\035\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\122\054\121\055" +
    "\uffce\001\002\000\016\007\063\010\071\034\101\052\072" +
    "\055\016\056\061\001\002\000\046\004\uffd1\005\uffd1\017" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\026\uffd1\033\uffd1\035\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\045\uffd1\047\uffd1\050\uffd1\051" +
    "\111\052\113\055\uffd1\001\002\000\046\004\uffd0\005\uffd0" +
    "\017\uffd0\021\uffd0\022\uffd0\023\uffd0\026\uffd0\033\uffd0\035" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\045\uffd0\047\uffd0\050\uffd0" +
    "\051\111\052\113\055\uffd0\001\002\000\016\007\063\010" +
    "\071\034\101\052\072\055\016\056\061\001\002\000\046" +
    "\004\uffd4\005\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\026" +
    "\uffd4\033\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4\045\uffd4" +
    "\047\uffd4\050\uffd4\051\111\052\113\055\uffd4\001\002\000" +
    "\006\035\103\047\135\001\002\000\020\006\060\007\063" +
    "\010\071\034\065\052\072\055\016\056\061\001\002\000" +
    "\004\050\137\001\002\000\020\006\060\007\063\010\071" +
    "\034\065\052\072\055\016\056\061\001\002\000\004\035" +
    "\141\001\002\000\036\017\uffde\021\uffde\022\uffde\023\uffde" +
    "\026\uffde\033\uffde\035\uffde\037\uffde\040\uffde\041\uffde\045" +
    "\uffde\047\uffde\050\uffde\055\uffde\001\002\000\020\006\060" +
    "\007\063\010\071\034\101\052\072\055\016\056\061\001" +
    "\002\000\042\004\uffd9\005\uffd9\017\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\026\uffd9\033\uffd9\035\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\045\uffd9\047\uffd9\050\uffd9\055\uffd9\001\002\000\042" +
    "\004\uffd7\005\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\026" +
    "\uffd7\033\uffd7\035\uffd7\037\uffd7\040\uffd7\041\uffd7\045\uffd7" +
    "\047\uffd7\050\uffd7\055\uffd7\001\002\000\020\006\060\007" +
    "\063\010\071\034\101\052\072\055\016\056\061\001\002" +
    "\000\042\004\142\005\uffdb\017\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\026\uffdb\033\uffdb\035\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\045\uffdb\047\uffdb\050\uffdb\055\uffdb\001\002\000\020\006" +
    "\060\007\063\010\071\034\065\052\072\055\016\056\061" +
    "\001\002\000\006\035\uffe2\045\154\001\002\000\006\035" +
    "\uffe0\045\uffe0\001\002\000\004\035\153\001\002\000\036" +
    "\017\uffdd\021\uffdd\022\uffdd\023\uffdd\026\uffdd\033\uffdd\035" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\045\uffdd\047\uffdd\050\uffdd" +
    "\055\uffdd\001\002\000\020\006\060\007\063\010\071\034" +
    "\065\052\072\055\016\056\061\001\002\000\004\035\uffe1" +
    "\001\002\000\034\002\ufffe\013\ufffe\014\ufffe\017\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\026\ufffe\027\ufffe\033\ufffe\040\ufffe" +
    "\041\ufffe\055\ufffe\001\002\000\004\042\160\001\002\000" +
    "\020\006\060\007\063\010\071\034\065\052\072\055\016" +
    "\056\061\001\002\000\024\017\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\026\ufff3\033\ufff3\040\ufff3\041\ufff3\055\ufff3\001\002" +
    "\000\004\041\163\001\002\000\034\002\uffff\013\uffff\014" +
    "\uffff\017\uffff\021\uffff\022\uffff\023\uffff\026\uffff\027\uffff" +
    "\033\uffff\040\uffff\041\uffff\055\uffff\001\002\000\026\017" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\026\uffbc\033\uffbc\040\uffbc" +
    "\041\uffbc\045\uffbc\055\uffbc\001\002\000\024\017\uffea\021" +
    "\uffea\022\uffea\023\uffea\026\uffea\033\uffea\040\uffea\041\uffea" +
    "\055\uffea\001\002\000\026\017\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\026\uffbf\033\uffbf\040\uffbf\041\uffbf\045\171\055\uffbf" +
    "\001\002\000\026\017\uffbd\021\uffbd\022\uffbd\023\uffbd\026" +
    "\uffbd\033\uffbd\040\uffbd\041\uffbd\045\uffbd\055\uffbd\001\002" +
    "\000\026\017\uffbb\021\uffbb\022\uffbb\023\uffbb\026\uffbb\033" +
    "\uffbb\040\uffbb\041\uffbb\045\uffbb\055\uffbb\001\002\000\024" +
    "\006\060\007\063\010\071\024\170\034\065\052\072\055" +
    "\016\056\061\057\164\001\002\000\024\017\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\026\uffbe\033\uffbe\040\uffbe\041\uffbe\055" +
    "\uffbe\001\002\000\006\034\174\050\175\001\002\000\004" +
    "\055\016\001\002\000\006\011\035\012\033\001\002\000" +
    "\004\040\006\001\002\000\026\013\ufff9\014\ufff9\017\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\027\ufff9\033\ufff9\040\ufff9\055" +
    "\ufff9\001\002\000\004\050\211\001\002\000\004\035\205" +
    "\001\002\000\006\035\uffb6\045\203\001\002\000\004\055" +
    "\016\001\002\000\004\035\uffb5\001\002\000\004\050\206" +
    "\001\002\000\006\011\035\012\033\001\002\000\004\040" +
    "\006\001\002\000\026\013\ufff8\014\ufff8\017\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\027\ufff8\033\ufff8\040\ufff8\055\ufff8\001" +
    "\002\000\006\011\035\012\033\001\002\000\006\035\uffb4" +
    "\045\uffb4\001\002\000\020\006\060\007\063\010\071\034" +
    "\065\052\072\055\016\056\061\001\002\000\024\017\uffed" +
    "\021\uffed\022\uffed\023\uffed\026\uffed\033\uffed\040\uffed\041" +
    "\uffed\055\uffed\001\002\000\006\026\ufff4\041\ufff4\001\002" +
    "\000\024\017\uffeb\021\uffeb\022\uffeb\023\uffeb\026\uffeb\033" +
    "\uffeb\040\uffeb\041\uffeb\055\uffeb\001\002\000\004\045\221" +
    "\001\002\000\004\045\uffb9\001\002\000\004\055\016\001" +
    "\002\000\024\017\uffba\021\uffba\022\uffba\023\uffba\026\uffba" +
    "\033\uffba\040\uffba\041\uffba\055\uffba\001\002\000\006\034" +
    "\224\040\006\001\002\000\004\055\016\001\002\000\026" +
    "\013\ufff7\014\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\027" +
    "\ufff7\033\ufff7\040\ufff7\055\ufff7\001\002\000\004\035\227" +
    "\001\002\000\004\040\006\001\002\000\026\013\ufff6\014" +
    "\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\027\ufff6\033\ufff6" +
    "\040\ufff6\055\ufff6\001\002\000\026\017\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\026\ufff0\030\234\033\ufff0\040\ufff0\041\ufff0" +
    "\055\ufff0\001\002\000\020\006\060\007\063\010\071\034" +
    "\065\052\072\055\016\056\061\001\002\000\024\017\uffef" +
    "\021\uffef\022\uffef\023\uffef\026\uffef\033\uffef\040\uffef\041" +
    "\uffef\055\uffef\001\002\000\020\006\060\007\063\010\071" +
    "\034\065\052\072\055\016\056\061\001\002\000\024\017" +
    "\uffee\021\uffee\022\uffee\023\uffee\026\uffee\033\uffee\040\uffee" +
    "\041\uffee\055\uffee\001\002\000\020\017\ufffb\021\ufffb\022" +
    "\ufffb\023\ufffb\033\ufffb\040\ufffb\055\ufffb\001\002\000\020" +
    "\006\060\007\063\010\071\034\065\052\072\055\016\056" +
    "\061\001\002\000\004\035\241\001\002\000\024\017\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\026\uffe8\033\uffe8\040\uffe8\041" +
    "\uffe8\055\uffe8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\240\000\006\002\003\011\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\014\004\007\005\021" +
    "\010\006\011\013\023\023\032\024\001\001\000\002\001" +
    "\001\000\006\004\007\005\235\001\001\000\002\001\001" +
    "\000\004\010\222\001\001\000\012\010\076\014\216\015" +
    "\215\023\217\001\001\000\002\001\001\000\014\003\014" +
    "\010\006\011\013\023\023\032\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\172\001\001\000\036" +
    "\010\054\012\165\013\164\023\072\024\166\025\067\026" +
    "\055\027\075\030\061\031\065\033\056\034\063\035\074" +
    "\036\073\001\001\000\014\003\014\010\006\011\013\023" +
    "\023\032\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\014\010\006\011\013\023" +
    "\023\032\052\001\001\000\006\006\030\010\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\051\010\027\001\001\000\004\007\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\010\054\023\072\024\066\025\067\026\055\027\075" +
    "\030\061\031\065\033\056\034\063\035\074\036\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\076\023\072\025\067\026\055\027\075\030" +
    "\061\031\065\035\143\036\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\010\054\023\072\024\133\025\067\026\055\027\075" +
    "\030\061\031\065\033\056\034\063\035\074\036\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\010\076\023\072\030\077\031" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\054\023\072\024\101\025\067\026\055" +
    "\027\075\030\061\031\065\033\056\034\063\035\074\036" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\010\054\023\072\024\104\025\067\026\055\027\075\030" +
    "\061\031\065\033\056\034\063\035\074\036\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\076\023\072\025\127\026\055\027\075\030\061" +
    "\031\065\001\001\000\016\010\076\023\072\026\125\027" +
    "\075\030\061\031\065\001\001\000\020\010\076\023\072" +
    "\025\124\026\055\027\075\030\061\031\065\001\001\000" +
    "\016\010\076\023\072\026\117\027\075\030\061\031\065" +
    "\001\001\000\020\010\076\023\072\025\115\026\055\027" +
    "\075\030\061\031\065\001\001\000\020\010\076\023\072" +
    "\025\116\026\055\027\075\030\061\031\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\076\023\072\027\123\030\061\031\065\001\001\000" +
    "\014\010\076\023\072\027\122\030\061\031\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\076\023\072\025\130\026\055" +
    "\027\075\030\061\031\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\076\023\072\025\132\026\055" +
    "\027\075\030\061\031\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\054\023\072\024\135\025\067" +
    "\026\055\027\075\030\061\031\065\033\056\034\063\035" +
    "\074\036\073\001\001\000\002\001\001\000\032\010\054" +
    "\023\072\024\137\025\067\026\055\027\075\030\061\031" +
    "\065\033\056\034\063\035\074\036\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\076\023\072\025" +
    "\067\026\055\027\075\030\061\031\065\035\142\036\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\010" +
    "\076\023\072\025\067\026\055\027\075\030\061\031\065" +
    "\034\145\035\074\036\073\001\001\000\002\001\001\000" +
    "\036\010\054\017\147\020\151\023\072\024\150\025\067" +
    "\026\055\027\075\030\061\031\065\033\056\034\063\035" +
    "\074\036\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\010\054\017" +
    "\147\020\154\023\072\024\150\025\067\026\055\027\075" +
    "\030\061\031\065\033\056\034\063\035\074\036\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\054\023\072\024\160\025\067\026\055\027" +
    "\075\030\061\031\065\033\056\034\063\035\074\036\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\010\054\012" +
    "\165\013\171\023\072\024\166\025\067\026\055\027\075" +
    "\030\061\031\065\033\056\034\063\035\074\036\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\177" +
    "\021\201\022\200\001\001\000\004\016\175\001\001\000" +
    "\004\011\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\177\021" +
    "\201\022\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\206\001\001\000\004\011\207\001\001\000" +
    "\002\001\001\000\004\016\211\001\001\000\002\001\001" +
    "\000\032\010\054\023\072\024\213\025\067\026\055\027" +
    "\075\030\061\031\065\033\056\034\063\035\074\036\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\076" +
    "\014\216\015\221\023\217\001\001\000\002\001\001\000" +
    "\004\011\224\001\001\000\010\010\177\021\201\022\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\010\054\023\072\024\232\025\067\026\055\027\075\030" +
    "\061\031\065\033\056\034\063\035\074\036\073\001\001" +
    "\000\002\001\001\000\032\010\054\023\072\024\234\025" +
    "\067\026\055\027\075\030\061\031\065\033\056\034\063" +
    "\035\074\036\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\010\054\017\147\020\237\023\072\024\150" +
    "\025\067\026\055\027\075\030\061\031\065\033\056\034" +
    "\063\035\074\036\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    }



	String lastError;

    /* Override the report_error method so it will display the line and
     * column of where the error occurred in the input as well as the
     * reason for the error which is passed into the method in the
     * String 'message'.
     */
    public void report_error(String message, Object info)
	{
	String st =  "Error";

        if (info instanceof java_cup.runtime.Symbol)
	    {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

	    /* s.left is supposed to hold the line number of the error.
	     * s.right is supposed to hold the column number.
	     */

            if (s.left >= 0)				// Check line number.
		{
                st += " in line " + (s.left + 1);
                if (s.right >= 0)			// Check column number.
                    st += ", column " + (s.right + 1);
		}
	    }
	    st += ": " + message;
        System.err.println (st);
        lastError = st;
	}

    // Override the report_fatal_error method to use the report_error method.
    public void report_fatal_error (String message, Object info) throws Exception
	{
        report_error (message, info);
        throw new Exception (lastError);
	}

   // version string for printing version in Main
   public static final String version =
     "Winter 2017" ;


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // string ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variable ::= string L_SQUARE expression R_SQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parameter ::= string COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameters ::= parameter COMMA parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // input ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inputs ::= input COMMA inputs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inputs",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // output ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // output ::= TEXTCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // output ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // outputs ::= output COMMA outputs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // outputs ::= output 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outputs",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bound ::= MINUS INTCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bound ::= INTCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // primitive ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // primitive ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primitive ::= INTCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unary_minus_operand ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_minus_operand",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unary_minus_operand ::= L_PAREN expression R_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_minus_operand",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unary_minus_operand ::= primitive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_minus_operand",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // times_or_divide_operand ::= MINUS unary_minus_operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_or_divide_operand",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // times_or_divide_operand ::= unary_minus_operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_or_divide_operand",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // times_or_divide_expression ::= times_or_divide_expression DIVIDE times_or_divide_operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_or_divide_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // times_or_divide_expression ::= times_or_divide_expression TIMES times_or_divide_operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_or_divide_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // times_or_divide_expression ::= times_or_divide_operand 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_or_divide_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arithmetic_expression ::= arithmetic_expression MINUS times_or_divide_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arithmetic_expression ::= arithmetic_expression PLUS times_or_divide_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arithmetic_expression ::= times_or_divide_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // compare_expression ::= arithmetic_expression GREATER EQUAL arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // compare_expression ::= arithmetic_expression GREATER arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // compare_expression ::= arithmetic_expression LESS EQUAL arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // compare_expression ::= arithmetic_expression LESS arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // compare_expression ::= arithmetic_expression NOT EQUAL arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // compare_expression ::= arithmetic_expression EQUAL arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // compare_expression ::= arithmetic_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compare_expression",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // negation_expression ::= NOT negation_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negation_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // negation_expression ::= compare_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("negation_expression",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // and_expression ::= and_expression AND negation_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // and_expression ::= negation_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("and_expression",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // or_expression ::= or_expression OR and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // or_expression ::= and_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("or_expression",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= string L_PAREN arguments R_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= L_PAREN expression QUESTION expression COLON expression R_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= or_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // argument ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arguments ::= argument COMMA arguments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arguments ::= argument 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // variable_names ::= string COMMA variable_names 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_names",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_names ::= string L_SQUARE bound DOT DOT bound R_SQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_names",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_names ::= string L_SQUARE INTCONST R_SQUARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_names",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable_names ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_names",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= string L_PAREN arguments R_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= WRITE outputs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= READ inputs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= RETURN WITHX expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= EXIT INTCONST WHEN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= EXIT WHEN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= EXIT INTCONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= EXIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= REPEAT statements UNTIL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= variable COLON EQUAL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statements ::= statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statements ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaration ::= PROCEDURE string L_PAREN parameters R_PAREN scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= PROCEDURE string scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= FUNCTION string L_PAREN parameters R_PAREN COLON type scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= FUNCTION string COLON type scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= VAR variable_names COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declarations ::= declaration declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // scope ::= L_CURLEY R_CURLEY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // scope ::= L_CURLEY statements R_CURLEY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // scope ::= L_CURLEY declarations statements R_CURLEY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scope",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= scope 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

