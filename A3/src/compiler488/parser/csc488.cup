// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.
import compiler488.ast.*;
import compiler488.ast.Readable;
import compiler488.ast.decl.*;
import compiler488.ast.expn.*;
import compiler488.ast.stmt.*;
import compiler488.ast.type.*;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;
	
	/* Override the report_error method so it will display the line and
	 * column of where the error occurred in the input as well as the
	 * reason for the error which is passed into the method in the
	 * String 'message'.
	 * @param message  error message to print
	 * @param info	 symbol containing line/column numbers
	 */
	public void report_error(String message, Object info)
	{
	String st =  "Error";
   
		if (info instanceof java_cup.runtime.Symbol)
		{
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

		/* s.left is supposed to hold the line number of the error.
		 * s.right is supposed to hold the column number.
			 * If either is < 0 the parser may have run off the end of the program
			 * and a Syntax Error message without line number may be printed.
		 */
   
			if (s.left >= 0)				// Check line number.
			{
				st += " in line " + (s.left + 1);
				if (s.right >= 0)			// Check column number.
					st += ", column " + (s.right + 1);
			}
			else
			   st += " at end of input " ;
		}
		st += ": " + message;
		System.err.println (st);
		lastError = st;
	}
   
	// Override the report_fatal_error method to use the report_error method.
	/** @throws SyntaxErrorException						*/
	public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
		report_error (message, info);
		throw new SyntaxErrorException (lastError);
	}
   
	// version string for printing version in Main
	public static final String version = "Winter 2017" ;

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

// DEFINITIONS for CSC488S Source Language  Winter  2017 

// Terminals returned by the scanner with no value attached.  
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal 	BOOLEAN,INTEGER,FUNCTION,PROCEDURE	;
terminal	DO,	ELSE,	EXIT,   IF	;
terminal	READ, 	REPEAT,	RETURN,	NEWLINE,THEN,	UNTIL	;
terminal	VAR,	WHEN,	WHILE,	WITHX,	WRITE 	;

// Special-character terminals, no value attached
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT, QUESTION, COLON	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal Program program;
nonterminal Scope scope;
nonterminal Stmt statement;
nonterminal Declaration declaration;
nonterminal ASTList<Stmt> statements;
nonterminal ASTList<Declaration> declarations;
nonterminal Stmt matchedStatement;
nonterminal Stmt unmatchedStatement;
nonterminal Printable output;
nonterminal ASTList<Readable> inputs;
nonterminal ASTList<Printable> outputs;
nonterminal Type type;
nonterminal Expn term;
nonterminal Expn factor;
nonterminal Expn primary;
nonterminal Expn variable;
nonterminal Expn negation;
nonterminal Expn arithExpn;
nonterminal Expn expression;
nonterminal Expn conjunction;
nonterminal Expn compareExpn;
nonterminal ASTList<Expn> arguments;
nonterminal ASTList<DeclarationPart> variablenames;
nonterminal Stmt procedureCall;
nonterminal ConstExpn constant;
nonterminal ScalarDecl parameter;
nonterminal DeclarationPart variablename;
nonterminal ASTList<ScalarDecl> parameters;


nonterminal Integer bound;
precedence   left ELSE ;


// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program
	::= scope:s																{: RESULT = new Program(s); :}
	;
   
scope
	::= L_CURLEY:b declarations:dd statements:ss R_CURLEY					{: RESULT = new Scope(dd, ss, bleft, bright); :}
	| L_CURLEY:b statements:ss R_CURLEY										{: RESULT = new Scope(ss, bleft, bright); :}
	| L_CURLEY:b R_CURLEY													{: RESULT = new Scope(bleft, bright); :}
	;

statements
	::= statement:s                                                  		{: RESULT = new ASTList(s); :}
	| statements:ss statement:s                                    			{: RESULT = ss.addLast(s); :}
	;
   
statement
	::=	matchedStatement:ms													{: RESULT = ms; :}
	|	unmatchedStatement:us												{: RESULT = us; :}
	;
	
declarations
	::= declaration:d														{: RESULT = new ASTList<Declaration>(d); :}
    |   declarations:ds declaration:d										{: RESULT = ds.addLast(d); :}
    ;

matchedStatement
    ::= variable:var COLON EQUAL expression:expn							{: RESULT = new AssignStmt(var, expn, varleft, varright); :}
    |   IF:_if expression:cond THEN matchedStatement:ifTrue ELSE matchedStatement:ifFalse		{: RESULT = new IfStmt(cond, ifTrue, ifFalse, _ifleft, _ifright); :}
    |   WHILE:whl expression:cond DO statement:body							{: RESULT = new WhileDoStmt(cond, new ASTList<Stmt>(body), whlleft, whlright); :}
    |   REPEAT:rpt statements:body UNTIL expression:cond					{: RESULT = new RepeatUntilStmt(cond, body, rptleft, rptright); :}
    |   EXIT:ext															{: RESULT = new ExitStmt(new BoolConstExpn(true, extleft, extright), 1, extleft, extright); :}
    |   EXIT:ext INTCONST:levels											{: RESULT = new ExitStmt(new BoolConstExpn(true, extleft, extright), levels, extleft, extright); :}
    |   EXIT:ext WHEN expression:cond										{: RESULT = new ExitStmt(cond, 1, extleft, extright); :}
    |   EXIT:ext INTCONST:levels WHEN expression:cond						{: RESULT = new ExitStmt(cond, levels, extleft, extright); :}
    |   RETURN WITHX:rtnw expression:retval									{: RESULT = new ReturnStmt(retval, rtnwleft, rtnwright); :}
    |   RETURN:rtn															{: RESULT = new ReturnStmt(rtnleft, rtnright); :}
    |   WRITE:wrt outputs:list												{: RESULT = new WriteStmt(list, wrtleft, wrtright); :}
    |   READ:rd inputs:list													{: RESULT = new ReadStmt(list, rdleft, rdright); :}
    |   procedureCall:pc													{: RESULT = pc; :}
    |   scope:s																{: RESULT = s; :}
    ;
    
unmatchedStatement
	::= IF:_if expression:cond THEN statement:ifTrue											{: RESULT = new IfStmt(cond, ifTrue, _ifleft, _ifright); :}
    |   IF:_if expression:cond THEN matchedStatement:ifTrue ELSE unmatchedStatement:ifFalse		{: RESULT = new IfStmt(cond, ifTrue, ifFalse, _ifleft, _ifright); :}
    ;

procedureCall
    ::= IDENT:name 															{: RESULT = new ProcedureCallStmt(name, nameleft, nameright);:}
    |   IDENT:name L_PAREN arguments:args R_PAREN							{: RESULT = new ProcedureCallStmt(name, args, nameleft, nameright); :}
    ;

declaration
    ::= VAR:var variablenames:names COLON type:type											{: RESULT = new MultiDeclarations(type, names, varleft, varright); :}
    | FUNCTION:fc IDENT:name COLON type:type scope:body										{: RESULT = new RoutineDecl(name, type, body, fcleft, fcright); :}
    | FUNCTION:fc IDENT:name L_PAREN parameters:params R_PAREN COLON type:type scope:body	{: RESULT = new RoutineDecl(name, type, params, body, fcleft, fcright); :}
    | PROCEDURE:pcd IDENT:name scope:body													{: RESULT = new RoutineDecl(name, body, pcdleft, pcdright); :}
    | PROCEDURE:pcd IDENT:name L_PAREN parameters:params R_PAREN scope:body					{: RESULT = new RoutineDecl(name, params, body, pcdleft, pcdright); :}
    ;
    
variablenames
    ::= variablename:name												{: RESULT = new ASTList<DeclarationPart>(name); :}
    |   variablenames:names COMMA variablename:name						{: RESULT = names.addLast(name); :}
    ;

variablename
    ::= IDENT:name														{: RESULT = new ScalarDeclPart(name, nameleft, nameright); :}
    |   IDENT:name L_SQUARE INTCONST:i R_SQUARE							{: RESULT = new ArrayDeclPart(name, i, nameleft, nameright); :}
    |   IDENT:name L_SQUARE bound:b1 DOT DOT bound:b2 R_SQUARE			{: RESULT = new ArrayDeclPart(name, b1, b2, nameleft, nameright); :}
    ;

// Not sure about this one
bound		
	::=	INTCONST:i														{: RESULT = i; :}
	|	MINUS INTCONST:i												{: RESULT = -i; :}
	;

type
    ::= INTEGER:i 														{: RESULT = new IntegerType(ileft, iright); :}
    |   BOOLEAN:bool													{: RESULT = new BooleanType(boolleft, boolright); :}
    ;
    
outputs	
	::= output:o														{: RESULT = new ASTList<Printable>(o); :}
	|	outputs:o1 COMMA output:o2										{: RESULT = o1.addLast(o2); :}
	;
	
output 
	::= expression:e													{: RESULT = e; :}
	|	TEXTCONST:t														{: RESULT = new TextConstExpn(t, tleft, tright); :}
	|	NEWLINE:nl														{: RESULT = new SkipConstExpn(nlleft, nlright); :}
	;

// Why this not working???
// Might need to create a new ReadableExpn.java class
inputs
    ::= variable:var													{: RESULT = new ASTList(var); :}
//    |   inputs:list COMMA variable:var									{: RESULT = list.addLast(var); :}
    ;

arguments
    ::= expression:e													{: RESULT = new ASTList<Expn>(e); :}
    |   arguments:a COMMA expression:e	`								{: RESULT = a.addLast(e); :}
    ;
    
parameters
    ::= parameter:p														{: RESULT = new ASTList<ScalarDecl>(p); :}
    |   parameters:ps COMMA parameter:p									{: RESULT = ps.addLast(p); :}
    ;

parameter
    ::= IDENT:name COLON type:t											{: RESULT = new ScalarDecl(name, t, nameleft, nameright); :}
    ;

expression	::=	conjunction			// disjunctions, associate left-to-right
		|	expression OR conjunction
		;

conjunction	::=	negation			// conjunctions, associate left-to-right
		|	conjunction AND negation
		;

negation	::=	compareExpn 			// negations
		|	NOT negation
		;

compareExpn	::=	arithExpn			// comparisons, do not associate
		|	arithExpn EQUAL arithExpn
		| 	arithExpn NOT EQUAL arithExpn
		|	arithExpn LESS arithExpn
		|	arithExpn LESS EQUAL arithExpn
		|	arithExpn GREATER arithExpn
		|	arithExpn GREATER EQUAL arithExpn
		;

arithExpn	::=	term				// expressions, associate + , - left-to-right
		|	arithExpn  PLUS  term
		|	arithExpn  MINUS term
		;

term		::=	factor				// terms, associate * , /   left-to-right
		|	term TIMES factor
		|	term DIVIDE factor
		;

factor		::=	primary				// unary minus
		|	MINUS factor
		;

primary		::=	constant				// integer or boolean constant
		|	variable				// scalar, array variable or function call
		|	IDENT L_PAREN arguments R_PAREN 	// function call
		| 	L_PAREN  expression  R_PAREN		// parenthesized expression
		|	L_PAREN  expression QUESTION expression COLON expression R_PAREN
		;

constant	::=	INTCONST	// integer constant
		|	TRUE		// constant true
		|	FALSE		// constant false
		;

variable	::=	IDENT					// scalar variable or function call
		|	IDENT L_SQUARE expression R_SQUARE	// element of an array
		;


