All tests are used to verify the correctness of the semantics (especially the failing tests) and the AST generation.

Passing Test Cases:

A1a.488 - From assignment 1, a program that uses all arithmetic, logical, and comparison operators.
A1b.488 - From assignment 1, a program using arrays including all forms of array declaration, positive and negative bounds.
A1c.488 - From assignment 1, a program using all forms of loop building and loop exit constructs.
A1d.488 - From assignment 1, a program using non-recursive functions and procedures with and without parameters.
A1e.488 - From assignment 1, a program using recursive functions and procedures with and without parameters.
arithmetic_1.488 - Basic arithmetic opertors test
arithmetic_2.488 - Basic arithmetic opertors test on multiple variables
arithmetic_3.488 - Arithmetic expression precedence of Operators test
arithmetic_4.488 - Arithmetic expression precedence of Operators test
array_1.488 - Basic array test
array_2.488 - Various array declaration with bound
array_3.488 - Basic array variable declaration
cond_1.488 - Conditional Expression > test
cond_2.488 - Conditional Expression < test
cond_3.488 - Conditional Expression >= test
cond_4.488 - Conditional Expression >= test
cond_5.488 - Conditional Expression <= test
cond_6.488 - Conditional Expression <= test
cond_7.488 - Conditional Expression >= AND test
decl_1.488 - Variable declaration test
decl_2.488 - Basic declaration and assignment test
decl_3.488 - Declaration, assignment, nad re-assignment test
eq_1.488 - Eqaulity Test
eq_2.488 - Inequality Test
eq_3.488 - Inequality Test
eq_4.488 - Inequality Test
eq_5.488 - Inequality Test
function_1.488 - Function with params and return test
function_2.488 - Function call with no param test
function_3.488 - Function with param with return test
function_4.488 - Recursively function with mutiple read and write test
function_5.488 - Function with and without params and return with and no return test
if_1.488 - Basic if test
if_2.488 - Basic if else test
if_3.488 - Various valid if-else-statements test
if_4.488 - Various valid if-statements mixing braces test
neg_1.488 - Negative integer test
negate_self.488 - Negative integer read and write test
nested_1.488 - Nested function and procedure test
nested_2.488 - Nested function and procedure test
nested_scopes.488 - Nested scope test
proc_1.488 - Procedure with params test
proc_2.488 - Procedure with no param but return empty test
read_1.488 - Read integer test
read_2.488 - Read multiple integer test
read_3.488 - Single variable read statement test
read_4.488 - Mutiple variables read statement test
read_write_1.488 - Read write boolean test
read_write_2.488 - Read write integer test
repeat_0.488 - Repeat loop statement exit
repeat_1.488 - Repeat loop statement exit
repeat_2.488 - Read repeat exit test
repeat_3.488 - Read repeat until test
variable_scope.488 - Variables scope declaration test
while_1.488 - Various valid loops test
while_2.488 - Loop statement exit on integer test
while_3.488 - Loop statement exit int on condition test
while_4.488 - While loop statement exit on condition test
while_5.488 - Read while do test
while_6.488 - Read while exit test
while_repeat_1.488 - While repeat exit test
write_1.488 - Write statment with multiple newlines
write_2.488 - Write function return value test
S24.488 - S24 Set result type to type of conditional expressions (to verify the correctness of the symbol table)
S37.488 - S37 Check that identifier has been declared as a scalar variable (to verify the correctness of the symbol table)
S38.488 - S38 Check that identifier has been declared as an array (to verify the correctness of the symbol table)
S39.488 - S39 Check identifier has been declared as a parameter (to verify the correctness of the symbol table)

Failing Test Cases:

function_decl.488 - Function re-declaration and parameter re-declaration (to verify the correctness of the symbol table)
procedure_decl.488 - Procedure redeclaration (to verify the correctness of the symbol table)      
procedurestmt.488 - Incorrect procedure call, validate the type and parameters  
sem_statement_exitwhen_2.488 - Invalid scope to call exit on condition
sem_statement_returnwith_2.488 - Return with misusage, validate the scope it is in (to verify the correctness of the symbol table)
sem_statement_exitintegerwhen.488 - Exit on integer with condition (incorrect integer value) (to verify the correctness of the symbol table)
sem_statement_exit.488 - Exit statement (invalid scope type) (to verify the correctness of the symbol table)
sem_statement_exitinteger.488 - Incorrect exit statement on integer (to verify the correctness of the symbol table)
sem_statement_exitwhen.488 - Incorrect loop exit with condition (to verify the correctness of the symbol table)
sem_statement_ifthen.488 - Incorrect If write statement with integer condition
sem_statement_ifthenelse.488 - Incorrect If else write statement on integer condition
sem_statement_procedurename.488 - Incorrect number of param for procedure
sem_statement_procedurenameargs.488 - Incorrect number of param for procedure
sem_statement_repeatuntil.488 - Incorrect condition on repeat statement
sem_statement_return.488 - Incorrect empty return statement
sem_statement_returnwith.488 - Incorrect function return type
sem_statement_variable.488 - Incorrect variable type assignment
sem_statement_whiledo.488 - Incorrect while loop condition statement
program_5.488 - Function misuage
scalar_decl.488 - Redeclaration in the same scope (to verify the correctness of the symbol table)
read.488 - Incorrect read statement, validate inputs type
write.488 - Incorrect write statement, validate outputs type
S20_scalar.488 - Incorrect usage on boolean type scalar value, validate its type
S21_scalar.488 - Incorrect usage on integer type scalar value, validate its type
S23_bracket_expn.488 - Incorrect usage on (expression), validate the type 
S25_param.488 - Parameter redeclaration
S30_not.488 - Not expressions misusage 
S31_unary_minus.488 - Incorrect unary minus expression, validate its usage and type
S31_array_S31.488 - Incorrect usage on array subscription, validate its type and existence
S31_binary_S31.488 - Incorrect usage on binary expressions (arithmetic and boolean), validate the result type
S32_binary.488 - Incorrect usage on binary expressions (equality) , validate the result type
S33_cond_expn.488 - Incorrect usage on conditional expressions, validate its type 
S37.488 - Identifier has not been declared as a scalar variable (to verify the correctness of the symbol table)
S38.488 - Identifier has not been declared as an array (to verify the correctness of the symbol table)
S39.488 - Identifier has not been declared as a parameter (to verify the correctness of the symbol table)
S43_function.488 - Function call misuage, validate its paramaters and type (to verify the correctness of the symbol table)                 


